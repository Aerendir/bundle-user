<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.14.1@b9d355e0829c397b9b3b47d0c0ed042a8a70284d">
  <file src="src/Command/AbstractUserActivationCommand.php">
    <DeprecatedFunction>
      <code><![CDATA[sprintf('User class "%s" must implement interface "%s".', \get_class($this->user), HasActivationInterface::class)]]></code>
    </DeprecatedFunction>
    <NonInvariantDocblockPropertyType>
      <code>$user</code>
      <code>$user</code>
      <code>$user</code>
    </NonInvariantDocblockPropertyType>
    <RedundantCast>
      <code>(int) $initialized</code>
    </RedundantCast>
    <UndefinedClass>
      <code>Command</code>
      <code>Command</code>
    </UndefinedClass>
  </file>
  <file src="src/Command/AbstractUserCommand.php">
    <DeprecatedFunction>
      <code><![CDATA[sprintf('User "%s" not found.', $this->unique)]]></code>
    </DeprecatedFunction>
    <RedundantCast>
      <code>(int) $initialized</code>
    </RedundantCast>
    <UndefinedClass>
      <code>Command</code>
      <code>Command</code>
    </UndefinedClass>
  </file>
  <file src="src/Command/AbstractUserRolesCommand.php">
    <DeprecatedFunction>
      <code><![CDATA[sprintf('  - %s', $error)]]></code>
      <code><![CDATA[sprintf('> <fg=green>%s</>', $role)]]></code>
      <code><![CDATA[sprintf('User class "%s" must implement interface "%s".', \get_class($this->user), HasRolesInterface::class)]]></code>
    </DeprecatedFunction>
    <MixedArgumentTypeCoercion>
      <code>$roles</code>
    </MixedArgumentTypeCoercion>
    <NonInvariantDocblockPropertyType>
      <code>$user</code>
      <code>$user</code>
      <code>$user</code>
    </NonInvariantDocblockPropertyType>
    <RedundantCast>
      <code>(int) $initialized</code>
    </RedundantCast>
    <UndefinedClass>
      <code>Command</code>
      <code>Command</code>
      <code>Command</code>
      <code>Command</code>
    </UndefinedClass>
  </file>
  <file src="src/Command/AbstractUsersCommand.php">
    <DeprecatedFunction>
      <code><![CDATA[sprintf('The provider "%s" you passed is not configured in your "security.providers". Available providers are: %s', $provider, \implode(', ', $availableManagers))]]></code>
      <code><![CDATA[sprintf('There is more than one provider configured in your "security.providers". Please, pass the option --provider to the command to use the right one. Available providers are: %s', \implode(', ', $availableManagers))]]></code>
    </DeprecatedFunction>
    <PossiblyUndefinedArrayOffset>
      <code>$availableManagers[0]</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/Command/RoleAddCommand.php">
    <DeprecatedFunction>
      <code><![CDATA[sprintf('Roles added to user %s.', $this->unique)]]></code>
    </DeprecatedFunction>
    <NonInvariantDocblockPropertyType>
      <code>$defaultDescription</code>
      <code>$defaultName</code>
    </NonInvariantDocblockPropertyType>
    <RedundantCast>
      <code>(int) $initialized</code>
    </RedundantCast>
    <UndefinedClass>
      <code>Command</code>
    </UndefinedClass>
  </file>
  <file src="src/Command/RoleRemCommand.php">
    <DeprecatedFunction>
      <code><![CDATA[sprintf('Roles removed from user %s.', $this->unique)]]></code>
    </DeprecatedFunction>
    <NonInvariantDocblockPropertyType>
      <code>$defaultDescription</code>
      <code>$defaultName</code>
    </NonInvariantDocblockPropertyType>
    <RedundantCast>
      <code>(int) $initialized</code>
    </RedundantCast>
    <UndefinedClass>
      <code>Command</code>
    </UndefinedClass>
  </file>
  <file src="src/Command/UserActivateCommand.php">
    <DeprecatedFunction>
      <code><![CDATA[sprintf('User %s activated.', $this->unique)]]></code>
    </DeprecatedFunction>
    <NonInvariantDocblockPropertyType>
      <code>$defaultDescription</code>
      <code>$defaultName</code>
    </NonInvariantDocblockPropertyType>
    <PossiblyUndefinedMethod>
      <code>activate</code>
    </PossiblyUndefinedMethod>
    <RedundantCast>
      <code>(int) $initialized</code>
    </RedundantCast>
    <UndefinedClass>
      <code>Command</code>
    </UndefinedClass>
  </file>
  <file src="src/Command/UserCreateCommand.php">
    <DeprecatedFunction>
      <code><![CDATA[sprintf('<error>%s (%s => %s)</error>', $error->getMessage(), $error->getPropertyPath(), $error->getInvalidValue())]]></code>
      <code><![CDATA[sprintf('Impossible to create the user "%s".', $this->unique)]]></code>
      <code><![CDATA[sprintf('Password for user %s: %s', $this->unique, $user->getPlainPassword())]]></code>
      <code><![CDATA[sprintf('User %s created.', $this->unique)]]></code>
    </DeprecatedFunction>
    <NonInvariantDocblockPropertyType>
      <code>$defaultDescription</code>
      <code>$defaultName</code>
    </NonInvariantDocblockPropertyType>
    <PossiblyUndefinedMethod>
      <code>getPlainPassword</code>
    </PossiblyUndefinedMethod>
    <RedundantCast>
      <code>(int) $initialized</code>
    </RedundantCast>
    <UndefinedClass>
      <code>Command</code>
      <code>Command</code>
      <code>Command</code>
    </UndefinedClass>
  </file>
  <file src="src/Command/UserDeactivateCommand.php">
    <DeprecatedFunction>
      <code><![CDATA[sprintf('User %s deactivated.', $this->unique)]]></code>
    </DeprecatedFunction>
    <NonInvariantDocblockPropertyType>
      <code>$defaultDescription</code>
      <code>$defaultName</code>
    </NonInvariantDocblockPropertyType>
    <PossiblyUndefinedMethod>
      <code>activate</code>
    </PossiblyUndefinedMethod>
    <RedundantCast>
      <code>(int) $initialized</code>
    </RedundantCast>
    <UndefinedClass>
      <code>Command</code>
    </UndefinedClass>
  </file>
  <file src="src/DependencyInjection/SHQUsersExtension.php">
    <ParamNameMismatch>
      <code>$containerBuilder</code>
      <code>$containerBuilder</code>
    </ParamNameMismatch>
  </file>
  <file src="src/Exception/PasswordResetTokenClassMustImplementPasswordResetTokenInterfaceInterface.php">
    <DeprecatedFunction>
      <code><![CDATA[sprintf('The entity %s MUST implement interface %s.', $passResetTokenClass, PasswordResetTokenInterface::class)]]></code>
    </DeprecatedFunction>
  </file>
  <file src="src/Exception/PasswordResetTokenClassNotImplemented.php">
    <DeprecatedFunction>
      <code><![CDATA[sprintf("The entity class %s doesn't exist.", $passResetTokenClass)]]></code>
    </DeprecatedFunction>
  </file>
  <file src="src/Exception/UserClassMustImplementInterface.php">
    <DeprecatedFunction>
      <code><![CDATA[sprintf('The User class "%s" MUST implement the "%s" interface.', $this->getUserClass($user), $interfaceToImplement)]]></code>
    </DeprecatedFunction>
  </file>
  <file src="src/Exception/UsersManagerException.php">
    <DeprecatedFunction>
      <code><![CDATA[sprintf('Currently there are "%s" providers configured in "security.providers". Please, specify for which one you\'d like to get the UsersManager. Available providers are: %s', \count($availableProviders), \implode(', ', $availableProviders))]]></code>
      <code><![CDATA[sprintf('The users manager for provider "%s" you are looking for doesn\'t exist. Please, be sure it is configured in "security.providers".', $provider)]]></code>
    </DeprecatedFunction>
  </file>
  <file src="src/Helper/PasswordResetHelper.php">
    <DeprecatedFunction>
      <code><![CDATA[sprintf('+%d seconds', self::RESET_TOKEN_LIFETIME)]]></code>
    </DeprecatedFunction>
    <PropertyNotSetInConstructor>
      <code>$session</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Manager/PasswordManager.php">
    <MixedArgument>
      <code>$plainPassword</code>
    </MixedArgument>
  </file>
  <file src="src/Manager/UsersManager.php">
    <InvalidArgument>
      <code>$user</code>
    </InvalidArgument>
    <InvalidReturnStatement>
      <code>$user</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>UserInterface</code>
    </InvalidReturnType>
    <MixedArgumentTypeCoercion>
      <code>\array_unique($currentRoles)</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess>
      <code>$currentRoles[$currentRoleKey]</code>
    </MixedArrayAccess>
    <PossiblyInvalidArgument>
      <code>$user</code>
    </PossiblyInvalidArgument>
    <PossiblyUndefinedMethod>
      <code>getRoles</code>
      <code>getRoles</code>
      <code>setRoles</code>
      <code>setRoles</code>
    </PossiblyUndefinedMethod>
  </file>
  <file src="src/Manager/UsersManagerRegistry.php">
    <PossiblyUndefinedArrayOffset>
      <code>$availableManagers[0]</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/Model/Property/PasswordResetTokenInterface.php">
    <MissingReturnType>
      <code>activate</code>
    </MissingReturnType>
  </file>
  <file src="src/Model/ResetPasswordTokenComponents.php">
    <DeprecatedFunction>
      <code>substr($publicToken, 0, self::TOKEN_SELECTOR_LENGTH)</code>
      <code>substr($publicToken, self::TOKEN_SELECTOR_LENGTH, self::TOKEN_VERIFIER_LENGTH)</code>
    </DeprecatedFunction>
  </file>
  <file src="src/Repository/PasswordResetTokenRepository.php">
    <DeprecatedFunction>
      <code><![CDATA[sprintf('-%s %s', $passResetLifespanAmountOf, $passResetLifespanUnit)]]></code>
    </DeprecatedFunction>
    <InvalidReturnStatement>
      <code><![CDATA[$this
            ->createQueryBuilder('t')
            ->delete()
            ->where('t.expiresAt <= :time')
            ->setParameter('time', $time)
            ->getQuery()
            ->getResult()]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>int</code>
    </InvalidReturnType>
    <LessSpecificImplementedReturnType>
      <code>PasswordResetTokenInterface[]</code>
      <code>PasswordResetTokenInterface[]</code>
      <code>PasswordResetTokenInterface[]</code>
    </LessSpecificImplementedReturnType>
    <MissingTemplateParam>
      <code>PasswordResetTokenRepository</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Util/PasswordResetTokenGenerator.php">
    <InvalidArgument>
      <code>$selector</code>
    </InvalidArgument>
    <PossiblyInvalidArgument>
      <code>$verifier</code>
      <code>$verifier</code>
    </PossiblyInvalidArgument>
  </file>
</files>
