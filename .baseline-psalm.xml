<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.15.0@5c774aca4746caf3d239d9c8cadb9f882ca29352">
  <file src="src/Command/AbstractUserActivationCommand.php">
    <NonInvariantDocblockPropertyType>
      <code>$user</code>
      <code>$user</code>
      <code>$user</code>
    </NonInvariantDocblockPropertyType>
    <RedundantCast>
      <code>(int) $initialized</code>
    </RedundantCast>
  </file>
  <file src="src/Command/AbstractUserCommand.php">
    <RedundantCast>
      <code>(int) $initialized</code>
      <code>(int) self::FAILURE</code>
      <code>(int) self::SUCCESS</code>
    </RedundantCast>
  </file>
  <file src="src/Command/AbstractUserRolesCommand.php">
    <MixedArgumentTypeCoercion>
      <code>$roles</code>
    </MixedArgumentTypeCoercion>
    <NonInvariantDocblockPropertyType>
      <code>$user</code>
      <code>$user</code>
      <code>$user</code>
    </NonInvariantDocblockPropertyType>
    <RedundantCast>
      <code>(int) $initialized</code>
      <code>(int) self::FAILURE</code>
      <code>(int) self::FAILURE</code>
      <code>(int) self::FAILURE</code>
      <code>(int) self::SUCCESS</code>
    </RedundantCast>
  </file>
  <file src="src/Command/AbstractUsersCommand.php">
    <PossiblyUndefinedArrayOffset>
      <code>$availableManagers[0]</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/Command/RoleAddCommand.php">
    <RedundantCast>
      <code>(int) $initialized</code>
      <code>(int) self::SUCCESS</code>
    </RedundantCast>
  </file>
  <file src="src/Command/RoleRemCommand.php">
    <RedundantCast>
      <code>(int) $initialized</code>
      <code>(int) self::SUCCESS</code>
    </RedundantCast>
  </file>
  <file src="src/Command/UserActivateCommand.php">
    <PossiblyUndefinedMethod>
      <code>activate</code>
    </PossiblyUndefinedMethod>
    <RedundantCast>
      <code>(int) $initialized</code>
      <code>(int) self::SUCCESS</code>
    </RedundantCast>
  </file>
  <file src="src/Command/UserCreateCommand.php">
    <ImplicitToStringCast>
      <code><![CDATA[$error->getMessage()]]></code>
    </ImplicitToStringCast>
    <MixedArgument>
      <code><![CDATA[$error->getInvalidValue()]]></code>
      <code><![CDATA[$user->getPlainPassword()]]></code>
    </MixedArgument>
    <PossiblyUndefinedMethod>
      <code>getPlainPassword</code>
    </PossiblyUndefinedMethod>
    <RedundantCast>
      <code>(int) $initialized</code>
      <code>(int) self::FAILURE</code>
      <code>(int) self::FAILURE</code>
      <code>(int) self::SUCCESS</code>
    </RedundantCast>
  </file>
  <file src="src/Command/UserDeactivateCommand.php">
    <PossiblyUndefinedMethod>
      <code>activate</code>
    </PossiblyUndefinedMethod>
    <RedundantCast>
      <code>(int) $initialized</code>
      <code>(int) self::SUCCESS</code>
    </RedundantCast>
  </file>
  <file src="src/DependencyInjection/SHQUsersExtension.php">
    <ParamNameMismatch>
      <code>$containerBuilder</code>
      <code>$containerBuilder</code>
    </ParamNameMismatch>
  </file>
  <file src="src/Exception/PasswordResetTokenClassNotImplemented.php">
    <PossiblyNullArgument>
      <code>$passResetTokenClass</code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Helper/PasswordResetHelper.php">
    <PropertyNotSetInConstructor>
      <code>$session</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Manager/PasswordManager.php">
    <MixedArgument>
      <code>$plainPassword</code>
    </MixedArgument>
  </file>
  <file src="src/Manager/UsersManager.php">
    <InvalidArgument>
      <code>$user</code>
    </InvalidArgument>
    <InvalidReturnStatement>
      <code>$user</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>UserInterface</code>
    </InvalidReturnType>
    <MixedArgumentTypeCoercion>
      <code>\array_unique($currentRoles)</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess>
      <code>$currentRoles[$currentRoleKey]</code>
    </MixedArrayAccess>
    <PossiblyInvalidArgument>
      <code>$user</code>
    </PossiblyInvalidArgument>
    <PossiblyUndefinedMethod>
      <code>getRoles</code>
      <code>getRoles</code>
      <code>setRoles</code>
      <code>setRoles</code>
    </PossiblyUndefinedMethod>
  </file>
  <file src="src/Manager/UsersManagerRegistry.php">
    <PossiblyUndefinedArrayOffset>
      <code>$availableManagers[0]</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/Model/Property/PasswordResetTokenInterface.php">
    <MissingReturnType>
      <code>activate</code>
    </MissingReturnType>
  </file>
  <file src="src/Model/ResetPasswordTokenComponents.php">
    <DeprecatedFunction>
      <code>substr($publicToken, 0, self::TOKEN_SELECTOR_LENGTH)</code>
      <code>substr($publicToken, self::TOKEN_SELECTOR_LENGTH, self::TOKEN_VERIFIER_LENGTH)</code>
    </DeprecatedFunction>
  </file>
  <file src="src/Repository/PasswordResetTokenRepository.php">
    <InvalidReturnStatement>
      <code><![CDATA[$this
            ->createQueryBuilder('t')
            ->delete()
            ->where('t.expiresAt <= :time')
            ->setParameter('time', $time)
            ->getQuery()
            ->getResult()]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>int</code>
    </InvalidReturnType>
    <LessSpecificImplementedReturnType>
      <code>PasswordResetTokenInterface[]</code>
      <code>PasswordResetTokenInterface[]</code>
      <code>PasswordResetTokenInterface[]</code>
    </LessSpecificImplementedReturnType>
    <MethodSignatureMustProvideReturnType>
      <code>Bun</code>
      <code><![CDATA[<aerendir]]></code>
      <code>ers Bun</code>
      <code><![CDATA[pi <ae]]></code>
    </MethodSignatureMustProvideReturnType>
    <MissingTemplateParam>
      <code>PasswordResetTokenRepository</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Util/PasswordResetTokenGenerator.php">
    <ImplicitToStringCast>
      <code>$selector</code>
    </ImplicitToStringCast>
    <PossiblyInvalidArgument>
      <code>$verifier</code>
      <code>$verifier</code>
    </PossiblyInvalidArgument>
    <TypeDoesNotContainType>
      <code>false === $hashed</code>
      <code>false === $hashed</code>
    </TypeDoesNotContainType>
  </file>
</files>
